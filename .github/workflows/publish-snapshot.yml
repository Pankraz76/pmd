name: Publish Snapshot

on:
  workflow_run:
    workflows: [Build]
    types:
      - completed

permissions:
  contents: read # to fetch code (actions/checkout)

env:
  LANG: 'en_US.UTF-8'

jobs:
  check-version:
    # only run in the official pmd repo, where we have access to the secrets and not on forks
    # and only run for _successful_ push workflow runs on branch "main".
    if: ${{ github.repository == 'pmd/pmd'
            && github.event.workflow_run.event == 'push'
            && github.event.workflow_run.head_branch == 'main'
            && github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    defaults:
      run:
        shell: bash
    outputs:
      PMD_VERSION: ${{ steps.version.outputs.PMD_VERSION }}
    steps:
      - uses: actions/checkout@v4
        with:
         ref: main
      - name: Determine Version
        id: version
        run: |
          PMD_VERSION=$(./mvnw --batch-mode --no-transfer-progress help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "Determined PMD_VERSION=$PMD_VERSION"
          if [[ "$PMD_VERSION" != *-SNAPSHOT ]]; then
            echo "::error ::PMD_VERSION=$PMD_VERSION is not a snapshot version, aborting."
            exit 1
          fi
          echo "PMD_VERSION=$PMD_VERSION" >> "$GITHUB_OUTPUT"

  deploy-to-maven-central:
    needs: check-version
    # use environment maven-central, where secrets are configured for OSSRH_*
    environment: maven-central
    runs-on: ubuntu-latest
    timeout-minutes: 20
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          gpg-passphrase: MAVEN_GPG_PASSPHRASE
          gpg-private-key: ${{ secrets.PMD_CI_GPG_PRIVATE_KEY }}
      - uses: actions/cache@v4
        with:
          key: maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: maven-
          path: .m2/repository
          enableCrossOsArchive: true
      - uses: actions/download-artifact@v4
        with:
          name: compile-artifact
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}
      - name: Build and publish
        env:
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.PMD_CI_GPG_PASSPHRASE }}
        # note: we can't use artifact staging-repository, as the jars are unsigned.
        run: |
          ./mvnw --show-version --errors --batch-mode \
            -Dmaven.repo.local=.m2/repository \
            deploy \
            -DskipTests \
            -PfastSkip,sign,pmd-release -Dcyclonedx.skip=false

  deploy-to-sourceforge-files:
    needs: check-version
    # use environment sourceforge, where secrets are configured for PMD_WEB_SOURCEFORGE_NET_DEPLOY_KEY
    environment:
      name: sourceforge
      url: ${{ steps.upload.outputs.url_output }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: dist-artifact
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}
          path: dist

      - uses: actions/download-artifact@v4
        with:
          name: docs-artifact
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}
          path: docs

      - name: Setup GPG
        env:
          PMD_CI_GPG_PRIVATE_KEY: ${{ secrets.PMD_CI_GPG_PRIVATE_KEY }}
        run: |
          mkdir -p "${HOME}/.gpg"
          chmod 700 "${HOME}/.gpg"
          printenv PMD_CI_GPG_PRIVATE_KEY | gpg --batch --import

          gpg --list-keys --fingerprint --keyid-format=long
          gpg --list-secret-keys --fingerprint --keyid-format=long

      - name: Setup ssh key for sourceforge
        env:
          WEB_SF_DEPLOY_KEY: ${{ secrets.PMD_WEB_SOURCEFORGE_NET_DEPLOY_KEY }}
        run: |
          mkdir -p "${HOME}/.ssh"
          chmod 700 "${HOME}/.ssh"
          printenv WEB_SF_DEPLOY_KEY > "${HOME}/.ssh/web.sourceforge.net_deploy_key"
          chmod 600 "${HOME}/.ssh/web.sourceforge.net_deploy_key"
          echo "
          Host web.sourceforge.net
              IdentityFile=$HOME/.ssh/web.sourceforge.net_deploy_key
          " > "$HOME/.ssh/config"
          {
            #
            # web.sourceforge.net (https://sourceforge.net/p/forge/documentation/SSH%20Key%20Fingerprints/)
            #
            # run locally:
            # ssh-keyscan web.sourceforge.net | tee -a sf_known_hosts
            #
            # verify fingerprints:
            # ssh-keygen -F web.sourceforge.net -l -f sf_known_hosts
            # # Host web.sourceforge.net found: line 1 
            # web.sourceforge.net RSA SHA256:xB2rnn0NUjZ/E0IXQp4gyPqc7U7gjcw7G26RhkDyk90 
            # # Host web.sourceforge.net found: line 2 
            # web.sourceforge.net ECDSA SHA256:QAAxYkf0iI/tc9oGa0xSsVOAzJBZstcO8HqGKfjpxcY 
            # # Host web.sourceforge.net found: line 3 
            # web.sourceforge.net ED25519 SHA256:209BDmH3jsRyO9UeGPPgLWPSegKmYCBIya0nR/AWWCY 
            #
            # then add output of `ssh-keygen -F web.sourceforge.net -f sf_known_hosts`
            #
            echo 'web.sourceforge.net ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA2uifHZbNexw6cXbyg1JnzDitL5VhYs0E65Hk/tLAPmcmm5GuiGeUoI/B0eUSNFsbqzwgwrttjnzKMKiGLN5CWVmlN1IXGGAfLYsQwK6wAu7kYFzkqP4jcwc5Jr9UPRpJdYIK733tSEmzab4qc5Oq8izKQKIaxXNe7FgmL15HjSpatFt9w/ot/CHS78FUAr3j3RwekHCm/jhPeqhlMAgC+jUgNJbFt3DlhDaRMa0NYamVzmX8D47rtmBbEDU3ld6AezWBPUR5Lh7ODOwlfVI58NAf/aYNlmvl2TZiauBCTa7OPYSyXJnIPbQXg6YQlDknNCr0K769EjeIlAfY87Z4tw=='
            echo 'web.sourceforge.net ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBCwsY6sZT4MTTkHfpRzYjxG7mnXrGL74RCT2cO/NFvRrZVNB5XNwKNn7G5fHbYLdJ6UzpURDRae1eMg92JG0+yo='
            echo 'web.sourceforge.net ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOQD35Ujalhh+JJkPvMckDlhu4dS7WH6NsOJ15iGCJLC'
          } > "$HOME/.ssh/known_hosts"

      - name: Create docs zip
        env:
          PMD_VERSION: ${{ needs.check-version.outputs.PMD_VERSION }}
        run: |
          mv docs "pmd-doc-${PMD_VERSION}"
          zip -qr "pmd-dist-${PMD_VERSION}-doc.zip" "pmd-doc-${PMD_VERSION}/"

      - name: Sign files
        env:
          PMD_VERSION: ${{ needs.check-version.outputs.PMD_VERSION }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.PMD_CI_GPG_PASSPHRASE }}
        run: |
          printenv MAVEN_GPG_PASSPHRASE | gpg --pinentry-mode loopback --passphrase-fd 0 --batch --no-tty \
            --status-fd 1 --armor --detach-sign --sign "pmd-dist-${PMD_VERSION}-bin.zip"
          printenv MAVEN_GPG_PASSPHRASE | gpg --pinentry-mode loopback --passphrase-fd 0 --batch --no-tty \
            --status-fd 1 --armor --detach-sign --sign "pmd-dist-${PMD_VERSION}-src.zip"
          printenv MAVEN_GPG_PASSPHRASE | gpg --pinentry-mode loopback --passphrase-fd 0 --batch --no-tty \
            --status-fd 1 --armor --detach-sign --sign "pmd-dist-${PMD_VERSION}-doc.zip"

      - name: Upload to sourceforge
        id: upload
        env:
          PMD_VERSION: ${{ needs.check-version.outputs.PMD_VERSION }}
          PMD_SF_USER: adangel
        run: |
          # Deploy to sourceforge files https://sourceforge.net/projects/pmd/files/pmd/
          basePath="pmd/${PMD_VERSION}"
          targetUrl="https://sourceforge.net/projects/pmd/files/${basePath}"
          uploadUrl="${PMD_SF_USER}@web.sourceforge.net:/home/frs/project/pmd/${basePath}/"

          rsync -avh "dist/pmd-dist-${PMD_VERSION}-bin.zip"        "${uploadUrl}"
          rsync -avh "dist/pmd-dist-${PMD_VERSION}-bin.zip.asc"    "${uploadUrl}"
          rsync -avh "dist/pmd-dist-${PMD_VERSION}-src.zip"        "${uploadUrl}"
          rsync -avh "dist/pmd-dist-${PMD_VERSION}-src.zip.asc"    "${uploadUrl}"
          rsync -avh "dist/pmd-dist-${PMD_VERSION}-doc.zip"        "${uploadUrl}"
          rsync -avh "dist/pmd-dist-${PMD_VERSION}-doc.zip.asc"    "${uploadUrl}"
          rsync -avh "dist/pmd-${PMD_VERSION}-cyclonedx.xml"       "${uploadUrl}"
          rsync -avh "dist/pmd-${PMD_VERSION}-cyclonedx.json"      "${uploadUrl}"
          rsync -avh "pmd-doc-${PMD_VERSION}/pmd_release_notes.md" "${uploadUrl}/ReadMe.md"

          echo "TargetUrl: ${targetUrl}"
          echo "url_output=${targetUrl}" >> "$GITHUB_OUTPUT"

      - name: Cleanup ssh and gpg
        if: ${{ always() }}
        run: |
          rm -rf "${HOME}/.ssh"
          rm -rf "${HOME}/.gpg"

  deploy-to-sourceforge-io:
    needs: check-version
    # use environment sourceforge, where secrets are configured for PMD_WEB_SOURCEFORGE_NET_DEPLOY_KEY
    environment:
      name: sourceforge
      url: ${{ steps.upload.outputs.url_output }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: docs-artifact
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}
          path: docs

      - name: Setup ssh key for sourceforge
        env:
          WEB_SF_DEPLOY_KEY: ${{ secrets.PMD_WEB_SOURCEFORGE_NET_DEPLOY_KEY }}
        run: |
          mkdir -p "${HOME}/.ssh"
          chmod 700 "${HOME}/.ssh"
          printenv WEB_SF_DEPLOY_KEY > "${HOME}/.ssh/web.sourceforge.net_deploy_key"
          chmod 600 "${HOME}/.ssh/web.sourceforge.net_deploy_key"
          echo "
          Host web.sourceforge.net
              IdentityFile=$HOME/.ssh/web.sourceforge.net_deploy_key
          " > "$HOME/.ssh/config"
          {
            #
            # web.sourceforge.net (https://sourceforge.net/p/forge/documentation/SSH%20Key%20Fingerprints/)
            #
            # run locally:
            # ssh-keyscan web.sourceforge.net | tee -a sf_known_hosts
            #
            # verify fingerprints:
            # ssh-keygen -F web.sourceforge.net -l -f sf_known_hosts
            # # Host web.sourceforge.net found: line 1 
            # web.sourceforge.net RSA SHA256:xB2rnn0NUjZ/E0IXQp4gyPqc7U7gjcw7G26RhkDyk90 
            # # Host web.sourceforge.net found: line 2 
            # web.sourceforge.net ECDSA SHA256:QAAxYkf0iI/tc9oGa0xSsVOAzJBZstcO8HqGKfjpxcY 
            # # Host web.sourceforge.net found: line 3 
            # web.sourceforge.net ED25519 SHA256:209BDmH3jsRyO9UeGPPgLWPSegKmYCBIya0nR/AWWCY 
            #
            # then add output of `ssh-keygen -F web.sourceforge.net -f sf_known_hosts`
            #
            echo 'web.sourceforge.net ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA2uifHZbNexw6cXbyg1JnzDitL5VhYs0E65Hk/tLAPmcmm5GuiGeUoI/B0eUSNFsbqzwgwrttjnzKMKiGLN5CWVmlN1IXGGAfLYsQwK6wAu7kYFzkqP4jcwc5Jr9UPRpJdYIK733tSEmzab4qc5Oq8izKQKIaxXNe7FgmL15HjSpatFt9w/ot/CHS78FUAr3j3RwekHCm/jhPeqhlMAgC+jUgNJbFt3DlhDaRMa0NYamVzmX8D47rtmBbEDU3ld6AezWBPUR5Lh7ODOwlfVI58NAf/aYNlmvl2TZiauBCTa7OPYSyXJnIPbQXg6YQlDknNCr0K769EjeIlAfY87Z4tw=='
            echo 'web.sourceforge.net ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBCwsY6sZT4MTTkHfpRzYjxG7mnXrGL74RCT2cO/NFvRrZVNB5XNwKNn7G5fHbYLdJ6UzpURDRae1eMg92JG0+yo='
            echo 'web.sourceforge.net ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOQD35Ujalhh+JJkPvMckDlhu4dS7WH6NsOJ15iGCJLC'
          } > "$HOME/.ssh/known_hosts"

      - name: Upload to sourceforge
        id: upload
        env:
          PMD_SF_USER: adangel
        run: |
          targetPath="snapshot"
          targetUrl="https://pmd.sourceforge.io/${targetPath}/"
          rsync -ah --stats --delete "docs/" "${PMD_SF_USER}@web.sourceforge.net:/home/project-web/pmd/htdocs/${targetPath}/"

          echo "TargetUrl: ${targetUrl}"
          echo "url_output=${targetUrl}" >> "$GITHUB_OUTPUT"

      - name: Cleanup ssh
        if: ${{ always() }}
        run: |
          rm -rf "${HOME}/.ssh"

# TODO
# deploy-documentation:
# -> https://docs.pmd-code.org/pmd-doc-${PMD_CI_MAVEN_PROJECT_VERSION}/
# - also api docs https://docs.pmd-code.org/apidocs/*/${PMD_CI_MAVEN_PROJECT_VERSION}/
# - also symlink https://docs.pmd-code.org/snapshot -> pmd-doc-${PMD_CI_MAVEN_PROJECT_VERSION}
# - use environment with secrets
# update-github-pages:
# -> (https://pmd.github.io/pmd/)
# - just updates branch gh_pages
# - needs write permissions
# regression-tester-baseline:
# - create new baseline -> https://pmd-code.org/pmd-regression-tester/
# run-sonar: -> https://sonarcloud.io/dashboard?id=net.sourceforge.pmd%3Apmd
# run-coveralls: -> https://coveralls.io/github/pmd/pmd
