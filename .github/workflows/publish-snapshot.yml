name: Publish Snapshot

on:
  workflow_run:
    workflows: [Build]
    types:
      - completed

permissions:
  contents: read # to fetch code (actions/checkout)

env:
  LANG: 'en_US.UTF-8'

jobs:
  check-version:
    # only run in the official pmd repo, where we have access to the secrets and not on forks
    # and only run for _successful_ push workflow runs on branch "main".
    if: ${{ github.repository == 'pmd/pmd'
            && github.event.workflow_run.event == 'push'
            && github.event.workflow_run.head_branch == 'main'
            && github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    defaults:
      run:
        shell: bash
    outputs:
      PMD_VERSION: ${{ steps.version.outputs.PMD_VERSION }}
    steps:
      - uses: actions/checkout@v4
        with:
         ref: main
      - name: Determine Version
        id: version
        run: |
          PMD_VERSION=$(./mvnw --batch-mode --no-transfer-progress help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "Determined PMD_VERSION=$PMD_VERSION"
          if [[ "$PMD_VERSION" != *-SNAPSHOT ]]; then
            echo "::error ::PMD_VERSION=$PMD_VERSION is not a snapshot version, aborting."
            exit 1
          fi
          echo "PMD_VERSION=$PMD_VERSION" >> "$GITHUB_OUTPUT"

  deploy-to-maven-central:
    needs: check-version
    # use environment maven-central, where secrets are configured for OSSRH_*
    environment: maven-central
    runs-on: ubuntu-latest
    timeout-minutes: 20
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          gpg-passphrase: MAVEN_GPG_PASSPHRASE
          gpg-private-key: ${{ secrets.PMD_CI_GPG_PRIVATE_KEY }}
      - uses: actions/cache@v4
        with:
          key: maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: maven-
          path: .m2/repository
          enableCrossOsArchive: true
      - uses: actions/download-artifact@v4
        with:
          name: compile-artifact
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}
      - name: Build and publish
        env:
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.PMD_CI_GPG_PASSPHRASE }}
        # note: we can't use artifact staging-repository, as the jars are unsigned and javadoc+sources are missing.
        run: |
          ./mvnw --show-version --errors --batch-mode \
            -Dmaven.repo.local=.m2/repository \
            deploy \
            -DskipTests \
            -PfastSkip,sign,pmd-release -Dcyclonedx.skip=false

  deploy-to-sourceforge-files:
    needs: check-version
    # use environment sourceforge, where secrets are configured for PMD_WEB_SOURCEFORGE_NET_DEPLOY_KEY
    environment:
      name: sourceforge
      url: ${{ steps.upload.outputs.url_output }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: dist-artifact
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}
          path: dist

      - uses: actions/download-artifact@v4
        with:
          name: docs-artifact
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}
          path: docs

      - name: Setup GPG
        env:
          PMD_CI_GPG_PRIVATE_KEY: ${{ secrets.PMD_CI_GPG_PRIVATE_KEY }}
        run: |
          mkdir -p "${HOME}/.gpg"
          chmod 700 "${HOME}/.gpg"
          printenv PMD_CI_GPG_PRIVATE_KEY | gpg --batch --import

          gpg --list-keys --fingerprint --keyid-format=long
          gpg --list-secret-keys --fingerprint --keyid-format=long

      - name: Setup ssh key for sourceforge
        env:
          WEB_SF_DEPLOY_KEY: ${{ secrets.PMD_WEB_SOURCEFORGE_NET_DEPLOY_KEY }}
        run: |
          mkdir -p "${HOME}/.ssh"
          chmod 700 "${HOME}/.ssh"
          printenv WEB_SF_DEPLOY_KEY > "${HOME}/.ssh/web.sourceforge.net_deploy_key"
          chmod 600 "${HOME}/.ssh/web.sourceforge.net_deploy_key"
          echo "
          Host web.sourceforge.net
              IdentityFile=$HOME/.ssh/web.sourceforge.net_deploy_key
          " > "$HOME/.ssh/config"
          {
            #
            # web.sourceforge.net (https://sourceforge.net/p/forge/documentation/SSH%20Key%20Fingerprints/)
            #
            # run locally:
            # ssh-keyscan web.sourceforge.net | tee -a sf_known_hosts
            #
            # verify fingerprints:
            # ssh-keygen -F web.sourceforge.net -l -f sf_known_hosts
            # # Host web.sourceforge.net found: line 1 
            # web.sourceforge.net RSA SHA256:xB2rnn0NUjZ/E0IXQp4gyPqc7U7gjcw7G26RhkDyk90 
            # # Host web.sourceforge.net found: line 2 
            # web.sourceforge.net ECDSA SHA256:QAAxYkf0iI/tc9oGa0xSsVOAzJBZstcO8HqGKfjpxcY 
            # # Host web.sourceforge.net found: line 3 
            # web.sourceforge.net ED25519 SHA256:209BDmH3jsRyO9UeGPPgLWPSegKmYCBIya0nR/AWWCY 
            #
            # then add output of `ssh-keygen -F web.sourceforge.net -f sf_known_hosts`
            #
            echo 'web.sourceforge.net ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA2uifHZbNexw6cXbyg1JnzDitL5VhYs0E65Hk/tLAPmcmm5GuiGeUoI/B0eUSNFsbqzwgwrttjnzKMKiGLN5CWVmlN1IXGGAfLYsQwK6wAu7kYFzkqP4jcwc5Jr9UPRpJdYIK733tSEmzab4qc5Oq8izKQKIaxXNe7FgmL15HjSpatFt9w/ot/CHS78FUAr3j3RwekHCm/jhPeqhlMAgC+jUgNJbFt3DlhDaRMa0NYamVzmX8D47rtmBbEDU3ld6AezWBPUR5Lh7ODOwlfVI58NAf/aYNlmvl2TZiauBCTa7OPYSyXJnIPbQXg6YQlDknNCr0K769EjeIlAfY87Z4tw=='
            echo 'web.sourceforge.net ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBCwsY6sZT4MTTkHfpRzYjxG7mnXrGL74RCT2cO/NFvRrZVNB5XNwKNn7G5fHbYLdJ6UzpURDRae1eMg92JG0+yo='
            echo 'web.sourceforge.net ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOQD35Ujalhh+JJkPvMckDlhu4dS7WH6NsOJ15iGCJLC'
          } > "$HOME/.ssh/known_hosts"

      - name: Create docs zip
        env:
          PMD_VERSION: ${{ needs.check-version.outputs.PMD_VERSION }}
        run: |
          mv docs "pmd-doc-${PMD_VERSION}"
          zip -qr "pmd-dist-${PMD_VERSION}-doc.zip" "pmd-doc-${PMD_VERSION}/"

      - name: Sign files
        env:
          PMD_VERSION: ${{ needs.check-version.outputs.PMD_VERSION }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.PMD_CI_GPG_PASSPHRASE }}
        run: |
          printenv MAVEN_GPG_PASSPHRASE | gpg --pinentry-mode loopback --passphrase-fd 0 --batch --no-tty \
            --status-fd 1 --armor --detach-sign --sign "pmd-dist-${PMD_VERSION}-bin.zip"
          printenv MAVEN_GPG_PASSPHRASE | gpg --pinentry-mode loopback --passphrase-fd 0 --batch --no-tty \
            --status-fd 1 --armor --detach-sign --sign "pmd-dist-${PMD_VERSION}-src.zip"
          printenv MAVEN_GPG_PASSPHRASE | gpg --pinentry-mode loopback --passphrase-fd 0 --batch --no-tty \
            --status-fd 1 --armor --detach-sign --sign "pmd-dist-${PMD_VERSION}-doc.zip"

      - name: Upload to sourceforge
        id: upload
        env:
          PMD_VERSION: ${{ needs.check-version.outputs.PMD_VERSION }}
          PMD_SF_USER: adangel
        run: |
          # Deploy to sourceforge files https://sourceforge.net/projects/pmd/files/pmd/
          basePath="pmd/${PMD_VERSION}"
          targetUrl="https://sourceforge.net/projects/pmd/files/${basePath}"
          uploadUrl="${PMD_SF_USER}@web.sourceforge.net:/home/frs/project/pmd/${basePath}/"

          rsync -avh "dist/pmd-dist-${PMD_VERSION}-bin.zip"        "${uploadUrl}"
          rsync -avh "dist/pmd-dist-${PMD_VERSION}-bin.zip.asc"    "${uploadUrl}"
          rsync -avh "dist/pmd-dist-${PMD_VERSION}-src.zip"        "${uploadUrl}"
          rsync -avh "dist/pmd-dist-${PMD_VERSION}-src.zip.asc"    "${uploadUrl}"
          rsync -avh "dist/pmd-dist-${PMD_VERSION}-doc.zip"        "${uploadUrl}"
          rsync -avh "dist/pmd-dist-${PMD_VERSION}-doc.zip.asc"    "${uploadUrl}"
          rsync -avh "dist/pmd-${PMD_VERSION}-cyclonedx.xml"       "${uploadUrl}"
          rsync -avh "dist/pmd-${PMD_VERSION}-cyclonedx.json"      "${uploadUrl}"
          rsync -avh "pmd-doc-${PMD_VERSION}/pmd_release_notes.md" "${uploadUrl}/ReadMe.md"

          echo "TargetUrl: ${targetUrl}"
          echo "url_output=${targetUrl}" >> "$GITHUB_OUTPUT"

      - name: Cleanup ssh and gpg
        if: ${{ always() }}
        run: |
          rm -rf "${HOME}/.ssh"
          rm -rf "${HOME}/.gpg"

  deploy-to-sourceforge-io:
    needs: check-version
    # use environment sourceforge, where secrets are configured for PMD_WEB_SOURCEFORGE_NET_DEPLOY_KEY
    environment:
      name: sourceforge
      url: ${{ steps.upload.outputs.url_output }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: docs-artifact
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}
          path: docs

      - name: Setup ssh key for sourceforge
        env:
          WEB_SF_DEPLOY_KEY: ${{ secrets.PMD_WEB_SOURCEFORGE_NET_DEPLOY_KEY }}
        run: |
          mkdir -p "${HOME}/.ssh"
          chmod 700 "${HOME}/.ssh"
          printenv WEB_SF_DEPLOY_KEY > "${HOME}/.ssh/web.sourceforge.net_deploy_key"
          chmod 600 "${HOME}/.ssh/web.sourceforge.net_deploy_key"
          echo "
          Host web.sourceforge.net
              IdentityFile=$HOME/.ssh/web.sourceforge.net_deploy_key
          " > "$HOME/.ssh/config"
          {
            #
            # web.sourceforge.net (https://sourceforge.net/p/forge/documentation/SSH%20Key%20Fingerprints/)
            #
            # run locally:
            # ssh-keyscan web.sourceforge.net | tee -a sf_known_hosts
            #
            # verify fingerprints:
            # ssh-keygen -F web.sourceforge.net -l -f sf_known_hosts
            # # Host web.sourceforge.net found: line 1 
            # web.sourceforge.net RSA SHA256:xB2rnn0NUjZ/E0IXQp4gyPqc7U7gjcw7G26RhkDyk90 
            # # Host web.sourceforge.net found: line 2 
            # web.sourceforge.net ECDSA SHA256:QAAxYkf0iI/tc9oGa0xSsVOAzJBZstcO8HqGKfjpxcY 
            # # Host web.sourceforge.net found: line 3 
            # web.sourceforge.net ED25519 SHA256:209BDmH3jsRyO9UeGPPgLWPSegKmYCBIya0nR/AWWCY 
            #
            # then add output of `ssh-keygen -F web.sourceforge.net -f sf_known_hosts`
            #
            echo 'web.sourceforge.net ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA2uifHZbNexw6cXbyg1JnzDitL5VhYs0E65Hk/tLAPmcmm5GuiGeUoI/B0eUSNFsbqzwgwrttjnzKMKiGLN5CWVmlN1IXGGAfLYsQwK6wAu7kYFzkqP4jcwc5Jr9UPRpJdYIK733tSEmzab4qc5Oq8izKQKIaxXNe7FgmL15HjSpatFt9w/ot/CHS78FUAr3j3RwekHCm/jhPeqhlMAgC+jUgNJbFt3DlhDaRMa0NYamVzmX8D47rtmBbEDU3ld6AezWBPUR5Lh7ODOwlfVI58NAf/aYNlmvl2TZiauBCTa7OPYSyXJnIPbQXg6YQlDknNCr0K769EjeIlAfY87Z4tw=='
            echo 'web.sourceforge.net ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBCwsY6sZT4MTTkHfpRzYjxG7mnXrGL74RCT2cO/NFvRrZVNB5XNwKNn7G5fHbYLdJ6UzpURDRae1eMg92JG0+yo='
            echo 'web.sourceforge.net ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOQD35Ujalhh+JJkPvMckDlhu4dS7WH6NsOJ15iGCJLC'
          } > "$HOME/.ssh/known_hosts"

      - name: Upload to sourceforge
        id: upload
        env:
          PMD_SF_USER: adangel
        run: |
          targetPath="snapshot"
          targetUrl="https://pmd.sourceforge.io/${targetPath}/"
          rsync -ah --stats --delete "docs/" "${PMD_SF_USER}@web.sourceforge.net:/home/project-web/pmd/htdocs/${targetPath}/"

          echo "TargetUrl: ${targetUrl}"
          echo "url_output=${targetUrl}" >> "$GITHUB_OUTPUT"

      - name: Cleanup ssh
        if: ${{ always() }}
        run: |
          rm -rf "${HOME}/.ssh"

  deploy-to-pmd-code-doc:
    needs: check-version
    # use environment pmd-code, where secrets are configured for PMD_CODE_ORG_DEPLOY_KEY
    environment:
      name: pmd-code
      url: ${{ steps.upload.outputs.url_output }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: docs-artifact
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}
          path: docs

      - name: Setup ssh key for pmd-code
        env:
          PMD_CODE_ORG_DEPLOY_KEY: ${{ secrets.PMD_CODE_ORG_DEPLOY_KEY }}
        run: |
          mkdir -p "${HOME}/.ssh"
          chmod 700 "${HOME}/.ssh"
          printenv PMD_CODE_ORG_DEPLOY_KEY > "${HOME}/.ssh/pmd-code.org_deploy_key"
          chmod 600 "${HOME}/.ssh/pmd-code.org_deploy_key"
          echo "
          Host pmd-code.org
              IdentityFile=$HOME/.ssh/pmd-code.org_deploy_key
          " > "$HOME/.ssh/config"
          {
            #
            # pmd-code.org
            #
            # ssh-keyscan pmd-code.org | tee -a pmd_known_hosts
            # ssh-keygen -F pmd-code.org -l -f pmd_known_hosts
            # # Host pmd-code.org found: line 1 
            # pmd-code.org RSA SHA256:/uKehVNumCNvJL8C5CziwV9KkUUxHfggq0C4GTrUhwg
            # # Host pmd-code.org found: line 2 
            # pmd-code.org ECDSA SHA256:6aD1r1XuIoc/zgBT3bt1S9L5ToyJzdQ9rrcMchnqiRA
            # # Host pmd-code.org found: line 3 
            # pmd-code.org ED25519 SHA256:nvkIAzZhYTxXqSU3DWvos83A0EocZ5dsxNkx1LoMZhg
            # ssh-keygen -F pmd-code.org -f pmd_known_hosts
            echo 'pmd-code.org ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDVsIeF6xU0oPb/bMbxG1nU1NDyBpR/cBEPZcm/PuJwdI9B0ydPHA6FysqAnt32fNFznC2SWisnWyY3iNsP3pa8RQJVwmnnv9OboGFlW2/61o3iRyydcpPbgl+ADdt8iU9fmMI7dC04UqgHGBoqOwVNna9VylTjp5709cK2qHnwU450F6YcOEiOKeZfJvV4PmpJCz/JcsUVqft6StviR31jKnqbnkZdP8qNoTbds6WmGKyXkhHdLSZE7X1CFQH28tk8XFqditX93ezeCiThFL7EleDexV/3+2+cs5878sDMUMzHS5KShTjkxzhHaodhtIEdNesinq/hOPbxAGkQ0FbD'
            echo 'pmd-code.org ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBMfSJtZcJCeENSZMvdngr+Hwe7oUVQWWKwC4HnfiOoAh/NSIlzJyQvpoPZxnEFid6Y3ntDK+rnx04Japo63zD8Q='
            echo 'pmd-code.org ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIFa88nqfMavMH/tGeS5DNrSeM5AVHmZQGHh98vC1717o'
          } > "$HOME/.ssh/known_hosts"

      - name: Create docs zip
        env:
          PMD_VERSION: ${{ needs.check-version.outputs.PMD_VERSION }}
        run: |
          mv docs "pmd-doc-${PMD_VERSION}"
          zip -qr "pmd-dist-${PMD_VERSION}-doc.zip" "pmd-doc-${PMD_VERSION}/"

      - name: Upload to pmd-code.org
        id: upload
        env:
          PMD_VERSION: ${{ needs.check-version.outputs.PMD_VERSION }}
          PMD_CODE_SSH_USER: pmd
          PMD_CODE_DOCS_PATH: /docs.pmd-code.org/
        run: |
          targetUrl="https://docs.pmd-code.org/pmd-doc-${PMD_VERSION}/"
          filename="pmd-dist-${PMD_VERSION}-doc.zip"
          
          scp "${filename}" ${PMD_CODE_SSH_USER}@pmd-code.org:${PMD_CODE_DOCS_PATH}
          # shellcheck disable=SC2029
          ssh ${PMD_CODE_SSH_USER}@pmd-code.org "cd \"${PMD_CODE_DOCS_PATH}\" && \
                  ( test -h pmd-doc-${PMD_VERSION} && rm pmd-doc-${PMD_VERSION} || true ) && \
                  unzip -qo \"${filename}\" && \
                  rm \"${filename}\""

          # only for snapshot builds from branch main: https://docs.pmd-code.org/snapshot -> pmd-doc-${PMD_VERSION}
          # shellcheck disable=SC2029
          ssh ${PMD_CODE_SSH_USER}@pmd-code.org "cd \"${PMD_CODE_DOCS_PATH}\" && \
                  rm -f \"snapshot\" && \
                  ln -s \"pmd-doc-${PMD_VERSION}\" \"snapshot\""

          echo "TargetUrl: ${targetUrl}"
          echo "url_output=${targetUrl}" >> "$GITHUB_OUTPUT"

      - name: Cleanup ssh
        if: ${{ always() }}
        run: |
          rm -rf "${HOME}/.ssh"

  deploy-to-pmd-code-javadoc:
    needs: check-version
    # use environment pmd-code, where secrets are configured for PMD_CODE_ORG_DEPLOY_KEY
    environment:
      name: pmd-code
      url: ${{ steps.upload.outputs.url_output }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: javadocs-artifact
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}

      - name: Setup ssh key for pmd-code
        env:
          PMD_CODE_ORG_DEPLOY_KEY: ${{ secrets.PMD_CODE_ORG_DEPLOY_KEY }}
        run: |
          mkdir -p "${HOME}/.ssh"
          chmod 700 "${HOME}/.ssh"
          printenv PMD_CODE_ORG_DEPLOY_KEY > "${HOME}/.ssh/pmd-code.org_deploy_key"
          chmod 600 "${HOME}/.ssh/pmd-code.org_deploy_key"
          echo "
          Host pmd-code.org
              IdentityFile=$HOME/.ssh/pmd-code.org_deploy_key
          " > "$HOME/.ssh/config"
          {
            #
            # pmd-code.org
            #
            # ssh-keyscan pmd-code.org | tee -a pmd_known_hosts
            # ssh-keygen -F pmd-code.org -l -f pmd_known_hosts
            # # Host pmd-code.org found: line 1 
            # pmd-code.org RSA SHA256:/uKehVNumCNvJL8C5CziwV9KkUUxHfggq0C4GTrUhwg
            # # Host pmd-code.org found: line 2 
            # pmd-code.org ECDSA SHA256:6aD1r1XuIoc/zgBT3bt1S9L5ToyJzdQ9rrcMchnqiRA
            # # Host pmd-code.org found: line 3 
            # pmd-code.org ED25519 SHA256:nvkIAzZhYTxXqSU3DWvos83A0EocZ5dsxNkx1LoMZhg
            # ssh-keygen -F pmd-code.org -f pmd_known_hosts
            echo 'pmd-code.org ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDVsIeF6xU0oPb/bMbxG1nU1NDyBpR/cBEPZcm/PuJwdI9B0ydPHA6FysqAnt32fNFznC2SWisnWyY3iNsP3pa8RQJVwmnnv9OboGFlW2/61o3iRyydcpPbgl+ADdt8iU9fmMI7dC04UqgHGBoqOwVNna9VylTjp5709cK2qHnwU450F6YcOEiOKeZfJvV4PmpJCz/JcsUVqft6StviR31jKnqbnkZdP8qNoTbds6WmGKyXkhHdLSZE7X1CFQH28tk8XFqditX93ezeCiThFL7EleDexV/3+2+cs5878sDMUMzHS5KShTjkxzhHaodhtIEdNesinq/hOPbxAGkQ0FbD'
            echo 'pmd-code.org ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBMfSJtZcJCeENSZMvdngr+Hwe7oUVQWWKwC4HnfiOoAh/NSIlzJyQvpoPZxnEFid6Y3ntDK+rnx04Japo63zD8Q='
            echo 'pmd-code.org ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIFa88nqfMavMH/tGeS5DNrSeM5AVHmZQGHh98vC1717o'
          } > "$HOME/.ssh/known_hosts"

      - name: Upload javadocs to pmd-code.org
        id: upload
        env:
          PMD_VERSION: ${{ needs.check-version.outputs.PMD_VERSION }}
          PMD_CODE_SSH_USER: pmd
          PMD_CODE_DOCS_PATH: /docs.pmd-code.org/
        run: |
          targetUrl="https://docs.pmd-code.org/apidocs/"
          
          for moduleJavadocJar in */target/*-javadoc.jar */*/target/*-javadoc.jar; do
              moduleJavadocJarBasename="$(basename "$moduleJavadocJar")"
              module=${moduleJavadocJarBasename%%-${PMD_VERSION}-javadoc.jar}
    
              scp "$moduleJavadocJar" ${PMD_CODE_SSH_USER}@pmd-code.org:${PMD_CODE_DOCS_PATH}
              # shellcheck disable=SC2029
              ssh ${PMD_CODE_SSH_USER}@pmd-code.org "cd \"${PMD_CODE_DOCS_PATH}\" && \
                      mkdir -p \"apidocs/${module}/${PMD_VERSION}\" && \
                      unzip -qo -d \"apidocs/${module}/${PMD_VERSION}\" \"${moduleJavadocJarBasename}\" && \
                      rm \"${moduleJavadocJarBasename}\""
          done

          # make sure https://docs.pmd-code.org/apidocs/ shows directory index
          # shellcheck disable=SC2029
          ssh ${PMD_CODE_SSH_USER}@pmd-code.org "cd \"${PMD_CODE_DOCS_PATH}/apidocs\" && \
              echo 'Options +Indexes' > .htaccess"

          echo "TargetUrl: ${targetUrl}"
          echo "url_output=${targetUrl}" >> "$GITHUB_OUTPUT"

      - name: Cleanup ssh
        if: ${{ always() }}
        run: |
          rm -rf "${HOME}/.ssh"

  deploy-to-github-pages:
    needs: check-version
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: write # to push to branch gh-pages
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4
        with:
          ref: gh-pages
      - name: Clear old files
        run: rm -rf *
      - uses: actions/download-artifact@v4
        with:
          name: docs-artifact
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}
      - name: Commit and push new page
        env:
          WORKFLOW_RUN_HTML_URL: ${{ github.event.workflow_run.html_url }}
        run: |
          # https://api.github.com/users/pmd-actions-helper[bot]
          git config user.name "pmd-actions-helper[bot]"
          git config user.email "207160486+pmd-actions-helper[bot]@users.noreply.github.com"
          git add -A
          MSG="Update documentation

          Updated by: https://github.com/pmd/pmd/actions/runs/$GITHUB_RUN_ID
          Triggered by: ${WORKFLOW_RUN_HTML_URL}"
          git commit -q -m "$MSG"
          git push

          targetUrl="https://pmd.github.io/pmd/"
          echo "TargetUrl: ${targetUrl}"
          echo "url_output=${targetUrl}" >> "$GITHUB_OUTPUT"

  create-regression-tester-baseline:
    needs: check-version
    runs-on: ubuntu-latest
    # use environment pmd-code, where secrets are configured for PMD_CODE_ORG_DEPLOY_KEY
    environment:
      name: pmd-code
      url: ${{ steps.upload.outputs.url_output }}
    timeout-minutes: 60
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'
      - name: Set up Ruby 3.3
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.3
      - uses: actions/cache@v4
        with:
          path: |
            ~/.m2/repository
            ~/.gradle/caches
            ~/work/pmd/target/repositories
            vendor/bundle
          key: regressiontester-${{ hashFiles('.ci/files/project-list.xml', 'Gemfile.lock') }}
          restore-keys: regressiontester-
      - uses: actions/download-artifact@v4
        with:
          name: dist-artifact
          path: pmd-dist/target
      - name: Setup bundler
        run: |
          bundle config set --local gemfile .ci/files/Gemfile
          bundle config set --local path vendor/bundle
          bundle install
      - name: Prepare HOME/openjdk11
        run: |
          ln -sfn "${JAVA_HOME_11_X64}" "${HOME}/openjdk11"
      - name: Run pmdtester
        run: |
          cd ..
          bundle exec pmdtester \
              --mode single \
              --local-git-repo ./pmd \
              --patch-branch "main" \
              --patch-config ./pmd/.ci/files/all-regression-rules.xml \
              --list-of-project ./pmd/.ci/files/project-list.xml --html-flag \
              --threads "$(nproc)" \
              --error-recovery
          pushd target/reports || { echo "Directory 'target/reports' doesn't exist"; exit 1; }
      - name: Setup ssh key for pmd-code
        env:
          PMD_CODE_ORG_DEPLOY_KEY: ${{ secrets.PMD_CODE_ORG_DEPLOY_KEY }}
        run: |
          mkdir -p "${HOME}/.ssh"
          chmod 700 "${HOME}/.ssh"
          printenv PMD_CODE_ORG_DEPLOY_KEY > "${HOME}/.ssh/pmd-code.org_deploy_key"
          chmod 600 "${HOME}/.ssh/pmd-code.org_deploy_key"
          echo "
          Host pmd-code.org
              IdentityFile=$HOME/.ssh/pmd-code.org_deploy_key
          " > "$HOME/.ssh/config"
          {
            #
            # pmd-code.org
            #
            # ssh-keyscan pmd-code.org | tee -a pmd_known_hosts
            # ssh-keygen -F pmd-code.org -l -f pmd_known_hosts
            # # Host pmd-code.org found: line 1 
            # pmd-code.org RSA SHA256:/uKehVNumCNvJL8C5CziwV9KkUUxHfggq0C4GTrUhwg
            # # Host pmd-code.org found: line 2 
            # pmd-code.org ECDSA SHA256:6aD1r1XuIoc/zgBT3bt1S9L5ToyJzdQ9rrcMchnqiRA
            # # Host pmd-code.org found: line 3 
            # pmd-code.org ED25519 SHA256:nvkIAzZhYTxXqSU3DWvos83A0EocZ5dsxNkx1LoMZhg
            # ssh-keygen -F pmd-code.org -f pmd_known_hosts
            echo 'pmd-code.org ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDVsIeF6xU0oPb/bMbxG1nU1NDyBpR/cBEPZcm/PuJwdI9B0ydPHA6FysqAnt32fNFznC2SWisnWyY3iNsP3pa8RQJVwmnnv9OboGFlW2/61o3iRyydcpPbgl+ADdt8iU9fmMI7dC04UqgHGBoqOwVNna9VylTjp5709cK2qHnwU450F6YcOEiOKeZfJvV4PmpJCz/JcsUVqft6StviR31jKnqbnkZdP8qNoTbds6WmGKyXkhHdLSZE7X1CFQH28tk8XFqditX93ezeCiThFL7EleDexV/3+2+cs5878sDMUMzHS5KShTjkxzhHaodhtIEdNesinq/hOPbxAGkQ0FbD'
            echo 'pmd-code.org ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBMfSJtZcJCeENSZMvdngr+Hwe7oUVQWWKwC4HnfiOoAh/NSIlzJyQvpoPZxnEFid6Y3ntDK+rnx04Japo63zD8Q='
            echo 'pmd-code.org ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIFa88nqfMavMH/tGeS5DNrSeM5AVHmZQGHh98vC1717o'
          } > "$HOME/.ssh/known_hosts"
      - name: Upload report
        id: upload
        run: |
          cd ../target/reports
          zip -q -r "main-baseline.zip" "main/"
          scp "main-baseline.zip" pmd@pmd-code.org:/httpdocs/pmd-regression-tester/

          targetUrl="https://pmd-code.org/pmd-regression-tester/"
          echo "TargetUrl: ${targetUrl}"
          echo "url_output=${targetUrl}" >> "$GITHUB_OUTPUT"
      - name: Cleanup ssh
        if: ${{ always() }}
        run: |
          rm -rf "${HOME}/.ssh"

# TODO
# run-sonar: -> https://sonarcloud.io/dashboard?id=net.sourceforge.pmd%3Apmd
# run-coveralls: -> https://coveralls.io/github/pmd/pmd
